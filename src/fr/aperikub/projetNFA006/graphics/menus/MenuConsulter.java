/*
 * Nom de classe : MenuConsulter
 *
 * Description   : pilote le menu permettant de consulter l'annuaire
 *
 * Auteurs       : Steven Besnard, Agnes Laurencon, Olivier Baylac, Benjamin Launay
 *
 * Version       : 1.0
 *
 * Date          : 09/01/2022
 *
 * Copyright     : CC-BY-SA
 */

package fr.aperikub.projetNFA006.graphics.menus;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import fr.aperikub.projetNFA006.Cellule;
import fr.aperikub.projetNFA006.graphics.ResultsTableModel;


import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class MenuConsulter {

    private JPanel consultPane;
    private JPanel userSearchPanel;
    private JTextField TitreField;
    private JTextField ISBNField;

    private JTable resultsTable;
    private JButton validerButton;
    private JCheckBox selectAllBox;
    private JLabel TitreLabel;
    private JLabel ISBNLabel;
    private JLabel categorieLabel;
    private JComboBox categorieBox;
    private JButton searchByButton;

    private Cellule livreSearchResult;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        consultPane = new JPanel();
        consultPane.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        consultPane.setMinimumSize(new Dimension(500, 500));
        consultPane.setPreferredSize(new Dimension(700, 500));
        final JScrollPane scrollPane1 = new JScrollPane();
        consultPane.add(scrollPane1, new GridConstraints(4, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultsTable = new JTable();
        scrollPane1.setViewportView(resultsTable);
        userSearchPanel = new JPanel();
        userSearchPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        userSearchPanel.setVisible(true);
        consultPane.add(userSearchPanel, new GridConstraints(1, 1, 3, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        TitreField = new JTextField();
        userSearchPanel.add(TitreField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        TitreLabel = new JLabel();
        TitreLabel.setText("Titre");
        userSearchPanel.add(TitreLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ISBNField = new JTextField();
        ISBNField.setText("");
        userSearchPanel.add(ISBNField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        ISBNLabel = new JLabel();
        ISBNLabel.setText("ISBN");
        userSearchPanel.add(ISBNLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categorieBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("");
        defaultComboBoxModel1.addElement("fiction");
        defaultComboBoxModel1.addElement("documentaire");
        defaultComboBoxModel1.addElement("bande_dessinee");
        defaultComboBoxModel1.addElement("technique");
        defaultComboBoxModel1.addElement("biographique");
        defaultComboBoxModel1.addElement("jeunesse");
        categorieBox.setModel(defaultComboBoxModel1);
        userSearchPanel.add(categorieBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categorieLabel = new JLabel();
        categorieLabel.setText("Catégorie");
        userSearchPanel.add(categorieLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        validerButton = new JButton();
        validerButton.setText("valider");
        consultPane.add(validerButton, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectAllBox = new JCheckBox();
        selectAllBox.setText("tout consulter");
        consultPane.add(selectAllBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Comic Sans MS", -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Consulter l'annuaire");
        consultPane.add(label1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchByButton = new JButton();
        searchByButton.setText("Rechercher par :");
        consultPane.add(searchByButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return consultPane;
    }

    private enum SearchType {isbn, titre, categorie, noSearch}

    private SearchType searchType;
    private MenuPrincipal menuPrincipal;

    public MenuConsulter() {
        /*
         * vérifie le statut de l'utilisateur (administrateur ou particulier)
         */
//        searchType = SearchType.titre;
//        manageSearchPanel();
//
//        searchByButton.addActionListener(listener ->{
//            modifySearchType();
//        });

        /*
         * listener sur la checkbox permettant d'afficher l'intégralité des utilisateurs
         */
        selectAllBox.addActionListener((listener) -> {
            if (selectAllBox.isSelected()) {
                searchType = SearchType.noSearch;

                validerButton.setVisible(false);
                validerButton.doClick();
            } else {
                searchType = SearchType.titre;


                try {
                    resultsTable.setModel(new ResultsTableModel(null));
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                }
//                manageSearchPanel();
            }
        });


        validerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (selectAllBox.isSelected()) {
//                        livreSearchResult = new Livre[DataService.getLivres().size()];
//                        livreSearchResult = DataService.getLivres().values().toArray(livreSearchResult);
//                            ResultsTableModel resultsTableModel = new ResultsTableModel(livreSearchResult);
//                            resultsTable.setModel(resultsTableModel);

                        resultsTable.setVisible(true);
                        consultPane.updateUI();
                    } else {
                        boolean isbn = false;
                        boolean titre = false;
                        boolean categorie = false;
//                        switch (searchType){
//                            case isbn -> livreSearchResult = new Livre[]{Client.library.getLivre(ISBNField.getText())};
//                            case titre -> livreSearchResult = Client.library.getLivreParTitre(TitreField.getText()).toArray(new Livre[DataService.getLivres().size()]);
//                            case categorie -> livreSearchResult = Client.library.getLivreParCategorie(Livre.TCategorie.valueOf(categorieBox.getSelectedItem().toString())).toArray(new Livre[DataService.getLivres().size()]);
//                        }
//
                        if (livreSearchResult != null) {
                            ResultsTableModel resultsTableModel = new ResultsTableModel(livreSearchResult);
                            resultsTable.setModel(resultsTableModel);
                            resultsTable.setVisible(true);
                            consultPane.updateUI();
                        } else {
                            throw new Exception("aucun résultat");
                        }
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(consultPane, ex.getMessage(), "erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }





    /*
     * affiche la boite de dialogue de choix du type de recherche et gère le choix de l'utilisateur
     */


    public JPanel getConsultPane() {
        return consultPane;
    }

    public JButton getValiderButton() {
        return validerButton;
    }
}
